start: statements+

?statements: function+
           | assignment+
           | expression
           | collect+
           | control_statements+

function: "fn" identifier params start_fn "{" block "}" end_fn

start_fn: 

end_fn: 

func_call: identifier args

collect_call: identifier "." identifier args

params: "(" [ identifier ("," identifier)* ] ")"

args: "(" [ expression ("," expression)* ] ")"

identifier: CNAME

existing_ident: identifier

block: statements*

?expression: expression operator expression
          | "(" expression ")"
          | boolean
          | existing_ident
          | NUMBER -> number
          | collect_call
          | func_call
          | ESCAPED_STRING -> string

?conditional: expression conditional_operator expression
            | "!" expression
            | boolean

operator: "+" -> add
        | "-" -> sub
        | "*" -> mul
        | "/" -> div

conditional_operator: "==" -> eq
        | ">" -> gt
        | "<" -> lt
        | ">=" -> gte
        | "<=" -> lte
        | "!=" -> ne

control_statements: "if" conditional "{" block "}"
                | "if" conditional "{" block "}" "else" "{" block "}"

boolean: "true" -> true
        | "false" -> false

assignment: "let" identifier "=" expression

collect: "let" identifier "=" "collect" PATTERN

PATTERN: "/" _STRING_ESC_INNER "/"

%import common.CNAME
%import common.NUMBER
%import common.WS
%import common._STRING_ESC_INNER
%import common.ESCAPED_STRING
%import common.CPP_COMMENT
%ignore WS
%ignore CPP_COMMENT
